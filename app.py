import streamlit as st
import pathlib
from PIL import Image
import google.generativeai as genai

# ƒê·ªãnh nghƒ©a ·ª©ng d·ª•ng WSGI

# Configure the API key directly in the script
API_KEY = 'AIzaSyCR-XxNPJ3BcLkx5GymmZ-a1miuEw1cJI8'
genai.configure(api_key=API_KEY)

# Generation configuration
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

# Safety settings
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# Model name
MODEL_NAME = "gemini-1.5-pro-latest"

# Framework selection (e.g., Tailwind, Bootstrap, etc.)
framework = "Regular CSS use flex grid etc"  # Change this to "Bootstrap" or any other framework as needed

# Create the model
model = genai.GenerativeModel(
    model_name=MODEL_NAME,
    safety_settings=safety_settings,
    generation_config=generation_config,
)

# Start a chat session
chat_session = model.start_chat(history=[])

# Function to send a message to the model
def send_message_to_model(message, image_path):
    image_input = {
        'mime_type': 'image/jpeg',
        'data': pathlib.Path(image_path).read_bytes()
    }
    response = chat_session.send_message([message, image_input])
    return response.text

# Streamlit app
def main():
    # st.title("T·ª± ƒë·ªông code giao di·ªán theo h√¨nh ·∫£nh üë®‚Äçüíª ")
    st.subheader('T·ª± ƒë·ªông code giao di·ªán theo h√¨nh ·∫£nh üë®‚Äçüíª')

    uploaded_file = st.file_uploader("Ch·ªçn h√¨nh ·∫£nh...", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        try:
            # Load and display the image
            image = Image.open(uploaded_file)
            st.image(image, caption='Uploaded Image.', use_column_width=True)

            # Convert image to RGB mode if it has an alpha channel
            if image.mode == 'RGBA':
                image = image.convert('RGB')

            # Save the uploaded image temporarily
            temp_image_path = pathlib.Path("temp_image.jpg")
            image.save(temp_image_path, format="JPEG")

            # Generate UI description
            if st.button("B·∫Øt ƒë·∫ßu ph·∫ßn t√≠ch & code UI"):
                st.write("üßë‚Äçüíª ƒêang xem giao di·ªán c·ªßa b·∫°n...")
                prompt = "M√¥ t·∫£ giao di·ªán ng∆∞·ªùi d√πng (UI) m·ªôt c√°ch ch√≠nh x√°c. Khi b·∫°n tham chi·∫øu ƒë·∫øn m·ªôt ph·∫ßn t·ª≠ UI, h√£y ƒë·∫∑t t√™n c·ªßa n√≥ v√† h·ªôp gi·ªõi h·∫°n theo ƒë·ªãnh d·∫°ng: [t√™n ƒë·ªëi t∆∞·ª£ng (y_min, x_min, y_max, x_max)]. C≈©ng h√£y m√¥ t·∫£ m√†u s·∫Øc c·ªßa c√°c ph·∫ßn t·ª≠."
                description = send_message_to_model(prompt, temp_image_path)
                st.write(description)

                # Refine the description
                st.write("üîç L√†m tinh ch·ªânh m√¥ t·∫£ v·ªõi so s√°nh h√¨nh ·∫£nh...")
                refine_prompt = f"So s√°nh c√°c ph·∫ßn t·ª≠ UI ƒë√£ m√¥ t·∫£ v·ªõi h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p v√† x√°c ƒë·ªãnh b·∫•t k·ª≥ ph·∫ßn t·ª≠ n√†o b·ªã thi·∫øu ho·∫∑c kh√¥ng ch√≠nh x√°c. C≈©ng h√£y m√¥ t·∫£ m√†u s·∫Øc c·ªßa c√°c ph·∫ßn t·ª≠. Cung c·∫•p m·ªôt m√¥ t·∫£ tinh ch·ªânh v√† ch√≠nh x√°c v·ªÅ c√°c ph·∫ßn t·ª≠ UI d·ª±a tr√™n s·ª± so s√°nh n√†y. ƒê√¢y l√† m√¥ t·∫£ ban ƒë·∫ßu: {description}"
                refined_description = send_message_to_model(refine_prompt, temp_image_path)
                st.write(refined_description)

                # Generate HTML
                st.write("üõ†Ô∏è ƒêang t·∫°o website...")
                html_prompt = f"T·∫°o m·ªôt t·ªáp HTML d·ª±a tr√™n m√¥ t·∫£ UI sau ƒë√¢y, s·ª≠ d·ª•ng c√°c ph·∫ßn t·ª≠ UI ƒë∆∞·ª£c m√¥ t·∫£ trong ph·∫£n h·ªìi tr∆∞·ªõc. Bao g·ªìm CSS {framework} trong t·ªáp HTML ƒë·ªÉ ƒë·ªãnh d·∫°ng c√°c ph·∫ßn t·ª≠. ƒê·∫£m b·∫£o r·∫±ng c√°c m√†u s·∫Øc ƒë∆∞·ª£c s·ª≠ d·ª•ng gi·ªëng nh∆∞ giao di·ªán g·ªëc. Giao di·ªán c·∫ßn ph·∫£i ƒë√°p ·ª©ng v√† ∆∞u ti√™n di ƒë·ªông, kh·ªõp v·ªõi giao di·ªán g·ªëc m·ªôt c√°ch g·∫ßn nh·∫•t c√≥ th·ªÉ. Kh√¥ng bao g·ªìm b·∫•t k·ª≥ gi·∫£i th√≠ch ho·∫∑c b√¨nh lu·∫≠n n√†o. Tr√°nh s·ª≠ d·ª•ng html. v√† ·ªü cu·ªëi. CH·ªà tr·∫£ v·ªÅ m√£ HTML v·ªõi CSS n·ªôi tuy·∫øn. ƒê√¢y l√† m√¥ t·∫£ tinh ch·ªânh: {refined_description}"
                initial_html = send_message_to_model(html_prompt, temp_image_path)
                st.code(initial_html, language='html')

                # Refine HTML
                st.write("üîß Tinh ch·ªânh website...")
                refine_html_prompt = f"X√°c th·ª±c m√£ HTML sau ƒë√¢y d·ª±a tr√™n m√¥ t·∫£ UI v√† h√¨nh ·∫£nh v√† cung c·∫•p m·ªôt phi√™n b·∫£n tinh ch·ªânh c·ªßa m√£ HTML v·ªõi CSS {framework} nh·∫±m c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c, kh·∫£ nƒÉng ƒë√°p ·ª©ng v√† tu√¢n th·ªß thi·∫øt k·∫ø g·ªëc. CH·ªà tr·∫£ v·ªÅ m√£ HTML tinh ch·ªânh v·ªõi CSS n·ªôi tuy·∫øn. Tr√°nh s·ª≠ d·ª•ng html. v√† ·ªü cu·ªëi. ƒê√¢y l√† m√£ HTML ban ƒë·∫ßu: {initial_html}"
                refined_html = send_message_to_model(refine_html_prompt, temp_image_path)
                st.code(refined_html, language='html')

                # Save the refined HTML to a file
                with open("index.html", "w", encoding='utf-8') as file:  # Th√™m encoding='utf-8'
                    file.write(refined_html)
                st.success("T·ªáp HTML 'index.html' ƒë√£ ƒë∆∞·ª£c t·∫°o.")

                # Provide download link for HTML
                st.download_button(label="T·∫£i code giao di·ªán", data=refined_html, file_name="index.html", mime="text/html")
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")



if __name__ == "__main__":
    main()
